local UiLibrary = {
    Flags = {}
}

LaunchSettings = getgenv().UISettings

if (not LaunchSettings) then error("No launch settings table, set using getgenv().UISettings.") end

UiLibrary.LFlags = UiLibrary.Flags

cloneref = (cloneref or function(o) return o end)

function Services(ServiceTable)
    Imported = {}
    for _, Service in ipairs(ServiceTable) do
        Imported[Service] = cloneref(game:GetService(Service))
    end
    return Imported
end

--{ Imports
local HiddenGui = (get_hidden_gui or gethui)()
local Service = Services({"CoreGui", "TweenService", "UserInputService", "RunService", "Players"})
local LocalPlayer = Service["Players"].LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Request = (http and http.request) or http_request or request or httprequest
local GetCustomAsset = getcustomasset
local IsFolder = isfolder or is_folder
local MakeFolder = makefolder or make_folder or createfolder or create_folder
local ReadFile = readfile
local WriteFile = writefile

--{ Globals
local DiscordInvite = LaunchSettings["Invite"] or {"", ""}
local Util = {}
local DropDownIndex = 16000

function HasProperty(Object, Property)
	return pcall(function()
		local DoesPropertyExist = Object[Property]
	end)
end

--{ Outside Assets
function CreateDirectory(Structure, StartPath)
    StartPath = StartPath or ""

    for Name, Contents in pairs(Structure) do
        local CurrentPath = StartPath ~= "" and (StartPath .. "/" .. Name) or Name

        if typeof(Contents) == "table" then
            if not IsFolder(CurrentPath) then
                MakeFolder(CurrentPath)
            end
            CreateDirectory(Contents, CurrentPath)
        elseif typeof(Contents) == "string" then
            local Exists, Junk = ReadFile(CurrentPath)

            if (not Exists) then
                writefile(CurrentPath, Request({Url = Contents, Method = "GET"}).Body)
            end
        end
    end
end

if LaunchSettings["DirectoryStructure"] then
    CreateDirectory(LaunchSettings["DirectoryStructure"]) 
end

--{ Util Metatable
function Util:New(ElementInstance, ElementProperties, ElementChildren)
    local Element = {
        Self = Instance.new(ElementInstance),
        Properties = ElementProperties or {},
        Children = ElementChildren or {}
    }
    
    local SetupProperties = {
        BorderSizePixel = 0,
        Text = "",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    }

    for Property, Value in pairs(SetupProperties) do
        if HasProperty(Element.Self, Property) then
            Element.Self[Property] = Value
        end
    end

    for Property, Value in pairs(Element.Properties) do
        if HasProperty(Element.Self, Property) then
            Element.Self[Property] = Value
        end
    end

    for _, Child in pairs(Element.Children) do
        Child.Parent = Element.Self
    end

    return Element.Self
end

function Util:Round(Number, Place)
    Place = 1/Place
    return math.round(Number * Place) / Place
end

function Util:Tween(Element, Speed, Style, Direction, Properties)
    local Speed = Speed or 0.15
    local Style = Style or Enum.EasingStyle.Linear
    local Direction = Direction or Enum.EasingDirection.Out
    local Properties = Properties or {}

    local Tween = Service["TweenService"]:Create(Element, TweenInfo.new(Speed, Style, Direction), Properties)

    Tween:Play()

    return Tween
end

function Util:GetPosition(Element)
	return math.clamp(Mouse.X - Element.AbsolutePosition.X, 0, Element.AbsoluteSize.X)/Element.AbsoluteSize.X, math.clamp(Mouse.Y - Element.AbsolutePosition.Y, 0, Element.AbsoluteSize.Y)/Element.AbsoluteSize.Y
end

function Util:GetMouse()
    local MouseLocation = Service["UserInputService"]:GetMouseLocation()
    return Vector2.new(MouseLocation.X + 1, MouseLocation.Y - 35)
end

local DefaultTheme = {
    WindowBackground = Color3.fromRGB(22, 22, 22),

    Primary = Color3.fromRGB(15, 15, 15),
    Secondary = Color3.fromRGB(8, 8, 8),
    Tertiary = Color3.fromRGB(40, 40, 40),
    ElementHovered = Color3.fromRGB(255, 0, 0),
    ElementActive = Color3.fromRGB(255, 0, 0),
    DividerColor = Color3.fromRGB(40, 40, 40),
    BorderColor = Color3.fromRGB(40, 40, 40),
    Text = Color3.fromRGB(255, 255, 255),
    TextInactive = Color3.fromRGB(100, 100, 100),
    PlaceHolderText = Color3.fromRGB(100, 100, 100),
    ValueText = Color3.fromRGB(255, 255, 255),
    TitleText = Color3.fromRGB(255, 255, 255),
    TextHovered = Color3.fromRGB(255, 0, 0),
    TextActive = Color3.fromRGB(255, 0, 0)
}

function UiLibrary:Window(Params)
    Params.Text = Params.Text or "Window"

    local WindowTable = {}
    WindowTable.__index = WindowTable

    self.Tabs = 0
    self.Hovering = false

    local CurrentTab = nil

    local Viewport = Util:New(
        "ScreenGui",
        {
            Name = "Aether2.0",
            ZIndexBehavior = Enum.ZIndexBehavior.Global,
            Parent = HiddenGui or CoreGui
        },
        {
            Util:New(
                "Frame",
                {
                    Name = "Window",
                    BackgroundColor3 = DefaultTheme.WindowBackground,
                    Position = UDim2.new(0.5, -(650/2), 0.5, -(400/2)),
                    Size = UDim2.new(0, 650, 0, 400)
                },
                {
                    Util:New(
                        "UICorner",
                        {
                            CornerRadius = UDim.new(0, 8),
                        }
                    ),
                    Util:New(
                        "UIStroke",
                        {
                            Color = Color3.fromRGB(255, 255, 255),
                            Thickness = 2
                        },
                        {
                            Util:New(
                                "UIGradient",
                                {
                                    Color = ColorSequence.new{
                                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                                    },
                                    Rotation = 180,
                                    Transparency = NumberSequence.new{
                                        NumberSequenceKeypoint.new(0, 1),
                                        NumberSequenceKeypoint.new(0.75, 1),
                                        NumberSequenceKeypoint.new(1, 0)
                                    }
                                }
                            )
                        }
                    ),
                    Util:New(
                        "Frame",
                        {
                            Name = "ReverseOutline",
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                        },
                        {
                            Util:New(
                                "UICorner",
                                {
                                    CornerRadius = UDim.new(0, 8),
                                }
                            ),
                            Util:New(
                                "UIStroke",
                                {
                                    Color = Color3.fromRGB(255, 255, 255),
                                    Thickness = 2,
                                    Rotation = 0
                                },
                                {
                                    Util:New(
                                        "UIGradient",
                                        {
                                            Color = ColorSequence.new{
                                                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                                                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                                            },
                                            Rotation = 0,
                                            Transparency = NumberSequence.new{
                                                NumberSequenceKeypoint.new(0, 1),
                                                NumberSequenceKeypoint.new(0.75, 1),
                                                NumberSequenceKeypoint.new(1, 0)
                                            }
                                        }
                                    )
                                }
                            ),
                        }
                    ),
                    Util:New(
                        "Frame",
                        {
                            Name = "TabBar",
                            BackgroundColor3 = DefaultTheme.Primary,
                            Size = UDim2.new(0, 116, 1, -16),

                        },
                        {
                            Util:New(
                                "UICorner",
                                {
                                    CornerRadius = UDim.new(0, 8)
                                }
                            ),
                            Util:New(
                                "Frame",
                                {
                                    Name = "ActiveTabIndicator",
                                    Size = UDim2.new(1, -16, 0, 24),
                                    Visible = false
                                },
                                {
                                    Util:New(
                                        "UICorner",
                                        {
                                            CornerRadius = UDim.new(0, 6)
                                        }
                                    ),
                                    Util:New(
                                        "UIGradient",
                                        {
                                            Color = ColorSequence.new{
                                                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                                                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                                            },
                                            Transparency = NumberSequence.new{
                                                NumberSequenceKeypoint.new(0, 1),
                                                NumberSequenceKeypoint.new(0.55, 0.78),
                                                NumberSequenceKeypoint.new(1, 0.46)
                                            }
                                        }
                                    )
                                }
                            ),
                            Util:New(
                                "Frame",
                                {
                                    Name = "RemoveInnerRounding",
                                    BackgroundColor3 = DefaultTheme.Primary,
                                    Position = UDim2.new(1, -8, 0, 0),
                                    Size = UDim2.new(0, 8, 1, 0)
                                }
                            )
                        }
                    ),
                    Util:New(
                        "Frame",
                        {
                            Name = "TabContentsContainer",
                            Position = UDim2.new(0, 116, 0, 0),
                            Size = UDim2.new(1, -116, 1, -16),
                            BackgroundTransparency = 1
                        }
                    ),
                    Util:New(
                        "Frame",
                        {
                            Name = "TitleBar",
                            BackgroundColor3 = DefaultTheme.Secondary,
                            Position = UDim2.new(0, 0, 1, -16),
                            Size = UDim2.new(1, 0, 0, 16)
                        },
                        {
                            Util:New(
                                "UICorner",
                                {
                                    CornerRadius = UDim.new(0, 8),
                                }
                            ),
                            Util:New(
                                "Frame",
                                {
                                    Name = "RemoveInnerRounding",
                                    BackgroundColor3 = DefaultTheme.Secondary,
                                    Size = UDim2.new(1, 0, 0, 8),
                                    Position = UDim2.new(0, 0, 0, 0)
                                },
                                {
                                    Util:New(
                                        "UIPadding",
                                        {
                                            PaddingTop = UDim.new(0, 2)
                                        }
                                    ),
                                    Util:New(
                                        "TextButton",
                                        {
                                            Name = "JoinDiscord",
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            Font = Enum.Font.RobotoMono,
                                            RichText = true,
                                            Text = string.format("<b><i>%s</i></b>", DiscordInvite[1]),
                                            TextSize = 14,
                                            TextColor3 = DefaultTheme.TitleText,
                                            TextXAlignment = Enum.TextXAlignment.Right
                                        },
                                        {
                                            Util:New(
                                                "UIPadding",
                                                {
                                                    PaddingBottom = UDim.new(0, 1),
                                                    PaddingRight = UDim.new(0, 8)
                                                }
                                            )
                                        }
                                    ),
                                    Util:New(
                                        "TextLabel",
                                        {
                                            Name = "TitleLabel",
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            Font = Enum.Font.RobotoMono,
                                            RichText = true,
                                            Text = string.format("<b><i>%s</i></b>", Params.Text),
                                            TextSize = 14,
                                            TextColor3 = DefaultTheme.TitleText,
                                            TextXAlignment = Enum.TextXAlignment.Left
                                        },
                                        {
                                            Util:New(
                                                "UIPadding",
                                                {
                                                    PaddingBottom = UDim.new(0, 1),
                                                    PaddingLeft = UDim.new(0, 8)
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                        }
                    )
                }
            )
        }
    )

    Service["UserInputService"].InputBegan:Connect(function(Input, GameProcessed)
        if Input.KeyCode == Enum.KeyCode.Insert and not GameProcessed then
            Viewport.Window.Visible = (not Viewport.Window.Visible)
        end
    end)

    local function PositionTabs()
        print("Positioning Tabs..")
    end

    Viewport.Window.TabBar.ChildAdded:Connect(function()
      self.Tabs = self.Tabs + 1
  
      PositionTabs()
    end)

    function WindowTable:Exit()
        Viewport:Destroy()
    end

    function WindowTable:Toggle()
        Viewport.Enabled = (not Viewport.Enabled)
    end
end

return UiLibrary
